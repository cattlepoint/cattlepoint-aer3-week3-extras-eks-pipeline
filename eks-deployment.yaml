AWSTemplateFormatVersion: "2010-09-09"
Description: Basic three-AZ public-subnet EKS cluster with auto-scaling managed nodes and IAM user access.

Parameters:
  ClusterName:
    Type: String
    Default: basic-eks
  ClusterVersion:
    Type: String
    Default: "1.33"
  DesiredCapacity:
    Type: Number
    Default: 2
  MinCapacity:
    Type: Number
    Default: 1
  MaxCapacity:
    Type: Number
    Default: 4

Resources:
  # Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-1"
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: owned

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-2"
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: owned

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-3"
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: owned

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRTAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRTAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicRTAssoc3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # IAM roles
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly

  # EKS control plane
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt ClusterRole.Arn
      ComputeConfig:
        Enabled: true
        NodeRoleArn: !GetAtt NodeRole.Arn
        NodePools:
          - general-purpose
          - system
      KubernetesNetworkConfig:
        ElasticLoadBalancing:
          Enabled: true
      StorageConfig:
        BlockStorage:
          Enabled: true
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

  # EKS Pod Identity Agent Addon
  PodIdentityAgentAddon:
    Type: AWS::EKS::Addon
    DependsOn: EKSCluster
    Properties:
      AddonName: eks-pod-identity-agent
      ClusterName: !Ref EKSCluster
      ResolveConflicts: PRESERVE

  # IAM user access entry
  EruserAccessEntry:
    Type: AWS::EKS::AccessEntry
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSCluster
      PrincipalArn: arn:aws:iam::303747928409:user/eruser315
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope: { Type: cluster }

Outputs:
  ClusterEndpoint:
    Description: API server endpoint
    Value: !GetAtt EKSCluster.Endpoint
  ClusterName:
    Value: !Ref ClusterName
  NodeInstanceRole:
    Value: !Ref NodeRole
