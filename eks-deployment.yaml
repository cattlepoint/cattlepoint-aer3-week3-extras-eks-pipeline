AWSTemplateFormatVersion: "2010-09-09"
Description: Basic public-subnet EKS cluster with auto-scaling managed t3.nano nodes

Parameters:
  ClusterName:
    Type: String
    Default: basic-eks
  ClusterVersion:
    Type: String
    Default: "1.29"
  DesiredCapacity:
    Type: Number
    Default: 2
  MinCapacity:
    Type: Number
    Default: 1
  MaxCapacity:
    Type: Number
    Default: 4

Resources:
  # Networking (single public subnet)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: !Sub "${ClusterName}-vpc" }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet"
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: owned

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # IAM roles
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: [eks.amazonaws.com] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: [ec2.amazonaws.com] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  # EKS control plane
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt ClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: [!Ref PublicSubnet]
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

  # Managed node group (auto-scaling, t3.nano)
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeRole.Arn
      Subnets: [!Ref PublicSubnet]
      InstanceTypes: [t3.nano]
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MinSize: !Ref MinCapacity
        MaxSize: !Ref MaxCapacity
      Tags:
        Name: !Sub "${ClusterName}-ng"

Outputs:
  ClusterEndpoint:
    Description: API server endpoint
    Value: !GetAtt EKSCluster.Endpoint
  ClusterName:
    Value: !Ref ClusterName
  NodeInstanceRole:
    Value: !Ref NodeRole
